# -*- coding: utf-8 -*-
"""hw4-a4-matrix-completion-and-recommendation-systems.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GSDTaXIp22m8NuTLWIuYexiICE3Gf_uG

# Homework 4: Matrix Completion and Recommendation System
ðŸŽ¥ ðŸŽž ðŸŽ¬

## Information before starting

In this problem, we will be building a personalized movie recommendation system! To make these recommendations, we'll build on what we've learned in lecture about SVD and what we've practiced so far with Python and Python packages such as NumPy and PyTorch.

### Copying this Colab Notebook to your Google Drive

Since the course staff is the author of this notebook, you cannot make any lasting changes to it. You should make a copy of it to your Google Drive by clicking **File -> Save a Copy in Drive**.

### Problem Introduction

We will use the 100K MovieLens dataset available at https://grouplens.org/datasets/movielens/100k/ to estimate unknown user ratings given their previous ratings. Run the code block below to download the dataset.
"""

# @title loading dataset
!rm -rf ml-100k*
!wget https://files.grouplens.org/datasets/movielens/ml-100k.zip
!unzip ml-100k.zip
!mv ml-100k/u.data .

"""### Compute

This problem should not require using GPU. Since Google Colab will limit your GPU usage, we recommend saving your GPU quota for HW4 A3 and making sure that your runtime is set to CPU by going to **Runtime -> Change runtime type -> Select CPU under "Hardware accelerator"**.

### Submitting your assignment

Once you are done with the problem, make sure to put all of your necessary figures into your PDF submission. Then, download this notebook as a Python file (`.py`) by going to **File -> Download -> Download `.py`**. Rename this file as `hw4-a4.py` and upload to the Gradescope submission for HW4 code.

## Code: Setup

Let's start by importing the packages that we'll need to complete this problem.
"""

import csv
import numpy as np
from scipy.sparse.linalg import svds
import matplotlib.pyplot as plt
import torch

"""Now, let's load the 100K MovieLens data. If you have downloaded the `u.data` file and uploaded to the "Files" tab, the following code block will construct training and test sets for you. There are $m = 1682$ movies and $n = 943$ users in the dataset, and each user has rated at least 20 movies. The total dataset has 100,000 total ratings from all users, and our goal will be to estimate the unknown ratings that each user would assign to each movie. These ratings can then be used to recommend the "best" movies for each user!"""

data = []
with open('u.data') as csvfile:
    spamreader = csv.reader(csvfile, delimiter='\t')
    for row in spamreader:
        data.append([int(row[0])-1, int(row[1])-1, int(row[2])])
data = np.array(data)

num_observations = len(data)  # num_observations = 100,000
num_users = max(data[:,0])+1  # num_users = 943, indexed 0,...,942
num_items = max(data[:,1])+1  # num_items = 1682 indexed 0,...,1681

np.random.seed(1)
num_train = int(0.8*num_observations)

perm = np.random.permutation(data.shape[0])
train = data[perm[0:num_train],:]
test = data[perm[num_train::],:]

print(f"Successfully loaded 100K MovieLens dataset with",
      f"{len(train)} training samples and {len(test)} test samples")

"""For this problem, we will consider a matrix $R \in \mathbb{R}^{m \times n}$ where the entry $R_{i,j} \in \{1,...,5\}$ represents the $j$th user's rating on movie $i$. A higher value represents that the user is more staisfied with the movie.

## Code: Assignment

The rest is yours to code! We provide some scaffolding for your implementation, but feel free to modify it and implement however you would like to. You may use fundamental operators from `NumPy` and `PyTorch` in this problem, such as `numpy.linalg.lstsq, SVD, autograd`, etc., but you many not use any precooked algorithm from a package like `scikit-learn`.

### Part (a)

Our first estimator pools all users together and, for each movie, outputs as its prediction the average user rating of that movie in ``train``. That is, if $\mu \in \mathbb{R}^m$ is a vector where $\mu_i$ is the average rating of the users that rated the $i$-th movie. Write this estimator $\widehat{R}$ as a rank-one matrix.

Compute the estimate $\widehat{R}$. What is $\mathcal{E}_{\rm test} (\widehat{R})$ for this estimate?
"""

# Your code goes here. You should:

# 1. Compute estimate and

# Make matrix R.
m, n = 1682, 943
R = np.zeros(shape=(m, n))
for i in range(train.shape[0]):
  [user, movie, rating] = train[i]
  R[movie, user] = rating

# 1. Compute R_hat.
mu = np.mean(R, axis=1)
ones = np.ones(shape=n)
R_hat = np.outer(mu, ones)

# 2. Evaluate test error.
# R_test = np.zeros(shape=(m, n))
error = 0
for i in range(test.shape[0]):
  [user, movie, rating] = test[i]
  error += (rating - R_hat[movie, user]) ** 2
error = error / test.shape[0]

"""### Part (b)
Allocate a matrix $\widetilde{R}_{i, j} \in \mathbb{R}^{m \times n}$ and set its entries equal to the known values in the training set, and $0$ otherwise.

Let $\widehat{R}^{(d)}$ be the best rank-$d$ approximation (in terms of squared error) approximation to $\widetilde{R}$. This is equivalent to computing the singular value decomposition (SVD) and using the top $d$ singular values. This learns a lower-dimensional vector representation for users and movies, assuming that each user would give a rating of $0$ to any movie they have not reviewed.

- For each $d = 1, 2, 5, 10, 20, 50$, compute the estimator $\widehat{R}^{(d)}$. We recommend using an efficient solver, such as ``scipy.sparse.linalg.svds``.
- Plot the average squared error of predictions on the training set and test set on a single plot, as a function of $d$.
"""

# Your code goes here
# Create the matrix R twiddle (\widetilde{R}).
r_twiddle = R.copy()

# Your code goes here
def construct_estimator(d, r_twiddle):
  # raise NotImplementedError("Your code goes here")
  [u, s, vh] = svds(A=r_twiddle, k=d)
  s = np.diag(s)
  R_d = u @ s @ vh
  return R_d

def get_error(d, r_twiddle, dataset):
  # raise NotImplementedError("Your code goes here")

  # Compute R_d.
  R_d = construct_estimator(d=d, r_twiddle=r_twiddle)

  # Compute error.
  error = 0
  for i in range(dataset.shape[0]):
    [user, movie, rating] = dataset[i]
    error += (rating - R_d[movie, user]) ** 2
  error = error / dataset.shape[0]
  return error

# Your code goes here
# Evaluate train and test error for: d = 1, 2, 5, 10, 20, 50.
d = [1, 2, 5, 10, 20, 50]
train_errors = np.zeros(shape=len(d))
test_errors = np.zeros(shape=len(d))

# Compute errors.
for i in range(len(d)):
  train_errors[i] = get_error(d=d[i], r_twiddle=r_twiddle, dataset=train)
  test_errors[i] = get_error(d=d[i], r_twiddle=r_twiddle, dataset=test)

# Your code goes here
# Plot both train and test error as a function of d on the same plot.
fig, ax = plt.subplots()
plt.xlabel("d")
plt.ylabel("Errors")
plt.plot(d, train_errors, label="Train Errors")
plt.plot(d, test_errors, label="Test Errors")
plt.legend()
plt.show()

"""### Part (c)
Replacing all missing values by a constant may impose strong and potentially incorrect assumptions on the unobserved entries of $R$. A more reasonable choice is to minimize the mean squared error (MSE) only on rated movies. Define a loss function:
$$
\mathcal{L} \left( \{u_i\}_{i=1}^m, \{v_j\}_{j=1}^n \right) :=
\sum_{(i, j, R_{i, j}) \in {\rm train}} (\langle u_i,v_j\rangle - R_{i,j})^2 +
\lambda \sum_{i=1}^m \|u_i\|_2^2 +
\lambda \sum_{j=1}^n \|v_j\|_2^2
$$
where $\lambda > 0$ is the regularization coefficient. We will implement algorithms to learn vector representations by minimizing the above loss. You may need to tune $\lambda$ and $\sigma$ to optimize the loss.

Implement alternating minimization (as defined in the homework spec) and plot the MSE of ``train`` and ``test`` for $d \in \{1, 2, 5, 10, 20, 50\}$.

*Note: we define the loss function here as the sum of squared errors; be careful to calculate and plot the mean squared error for your results*
"""

# Your code goes here. You are welcome to change the parameter lists and/or write new functions to complete this part of the assignment.
# In particular, you will likely also want to use R twiddle, and you may want to create global data structures to store observed entries.
# These global data structures might look like mappings of users to the movies they've reviewed, and of movies to the users who have reviewed that movie.

def closed_form_u(V, U, l, R, M):
  # raise NotImplementedError("Your code goes here")
  m = U.shape[0]
  for movie in range(m):
    users = M[movie]
    V_R = V[:, users]
    R_sub = R[movie, users]
    A = V_R @ V_R.T + l * np.eye(V_R.shape[0])
    b = V_R @ R_sub
    U[movie] = np.linalg.solve(A, b)
  return U

def closed_form_v(V, U, l, R, S):
    # raise NotImplementedError("Your code goes here")
    n = V.shape[1]
    for user in range(n):
      movies = S[user]
      U_R = U[movies, :]
      R_sub = R[movies, user]
      A = U_R.T @ U_R + l * np.eye(U_R.shape[1])
      b = U_R.T @ R_sub
      V[:, user] = np.linalg.solve(A, b)
    return V

def construct_alternating_estimator(d, r_twiddle, l=0.001, delta=1e-1, sigma=10, M=None, S=None):
  # raise NotImplementedError("Your code goes here")
  U, V = init_UV(sigma=0.1)
  for i in range(20):
    U = closed_form_u(V, U, l, r_twiddle, M)
    V = closed_form_v(V, U, l, r_twiddle, S)
  R_hat = U @ V
  return R_hat

# Your code goes here.
# Any additional functions that you may write to help implement alternating minimization.
# Initialize u and v.
def init_UV(m=1682, n=943, sigma=0.1, d=1):
  U = np.random.rand(m, d) * sigma
  V = np.random.rand(d, n) * sigma
  return U, V

# For each movie, gather the people who rated the movie from the training set in M.
# For each user, gather the movies they rated from the training set in S.
def get_maps(m=1682, n=943, train=None):
    M = [[] for _ in range(m)]
    S = [[] for _ in range(n)]
    for i in range(train.shape[0]):
      [user, movie, rating] = train[i]
      M[movie].append(user)
      S[user].append(movie)
    return M, S

def get_error_alternating(R_d, r_twiddle, dataset):
  # raise NotImplementedError("Your code goes here")
  # Compute error.
  error = 0
  num_ratings = 0

  # Iterate over all ratings in the dataset.
  for i in range(dataset.shape[0]):
      [user, movie, rating] = dataset[i]

      # Only calculate error for the known ratings in the test set.
      if rating != 0:
          error += (rating - R_d[movie, user]) ** 2
          num_ratings += 1

  # Average squared error.
  if num_ratings > 0:
      error = error / num_ratings
  else:
      error = float('inf')  # In case there are no valid ratings.
  return error

# Your code goes here.
# Evaluate train and test error for: d = 1, 2, 5, 10, 20, 50.

# Initialize d and maps.
d = [1, 2, 5, 10, 20, 50]
M, S = get_maps(train=train)

# Get errors.
train_errors = np.zeros(shape=len(d))
test_errors = np.zeros(shape=len(d))
for i in range(len(d)):
  # Compute R_d.
  R_d = construct_alternating_estimator(d=d[i], r_twiddle=r_twiddle, M=M, S=S)
  train_errors[i] = get_error_alternating(R_d=R_d, r_twiddle=r_twiddle, dataset=train)
  test_errors[i] = get_error_alternating(R_d=R_d, r_twiddle=r_twiddle, dataset=test)

# Your code goes here
# Plot both train and test error as a function of d on the same plot.
fig, ax = plt.subplots()
plt.xlabel("d")
plt.ylabel("Errors")
plt.plot(d, train_errors, label="Train Errors")
plt.plot(d, test_errors, label="Test Errors")
plt.legend()
plt.show()

